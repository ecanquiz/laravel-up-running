import{_ as e,c as s,o as a,V as i}from"./chunks/framework.D9sOcAzr.js";const u=JSON.parse('{"title":"Estructuras de Control","description":"","frontmatter":{},"headers":[],"relativePath":"blade-templating/control-structures.md","filePath":"blade-templating/control-structures.md"}'),n={name:"blade-templating/control-structures.md"},l=i(`<h1 id="estructuras-de-control" tabindex="-1">Estructuras de Control <a class="header-anchor" href="#estructuras-de-control" aria-label="Permalink to &quot;Estructuras de Control&quot;">​</a></h1><p>La mayoría de las estructuras de control de Blade te resultarán muy familiares. Muchas reflejan directamente el nombre y la estructura de la misma etiqueta en PHP.</p><p>Hay algunas herramientas útiles, pero en general, las estructuras de control tienen un aspecto más limpio que en PHP.</p><h2 id="condicionales" tabindex="-1">Condicionales <a class="header-anchor" href="#condicionales" aria-label="Permalink to &quot;Condicionales&quot;">​</a></h2><p>Primero, echemos un vistazo a las estructuras de control que permiten la lógica.</p><h3 id="if" tabindex="-1"><code>@if</code> <a class="header-anchor" href="#if" aria-label="Permalink to &quot;\`@if\`&quot;">​</a></h3><p>La función <code>@if ($condition)</code> de Blade se compila como <code>&lt;?php if ($condition): ?&gt;</code>. <code>@else</code>, <code>@elseif</code> y <code>@endif</code> también se compilan con exactamente el mismo estilo de sintaxis en PHP. Eche un vistazo al ejemplo siguiente.</p><p><em><code>@if</code>, <code>@else</code>, <code>@elseif</code> y <code>@endif</code></em></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@if (count($talks) === 1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    There is one talk at this time period.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@elseif (count($talks) === 0)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    There are no talks at this time period.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    There are {{ count($talks) }} talks at this time period.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@endif</span></span></code></pre></div><p>Al igual que con las condiciones nativas de PHP, puedes combinarlas como quieras. No tienen ninguna lógica especial; hay literalmente un analizador que busca algo con la forma de <code>@if ($condition)</code> y lo reemplaza con el código PHP apropiado.</p><h3 id="unless-y-endunless" tabindex="-1"><code>@unless</code> y <code>@endunless</code> <a class="header-anchor" href="#unless-y-endunless" aria-label="Permalink to &quot;\`@unless\` y \`@endunless\`&quot;">​</a></h3><p>Por otro lado, <code>@unless</code> es una sintaxis nueva que no tiene un equivalente directo en PHP. Es el inverso directo de <code>@if</code>. <code>@unless ($condition)</code> es lo mismo que <code>&lt;?php if (!$condition)</code>. Puedes ver su uso en el ejemplo siguiente.</p><p><em><code>@unless</code> y <code>@endunless</code></em></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@unless ($user-&gt;hasPaid())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   You can complete your payment by switching to the payment tab.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@endunless</span></span></code></pre></div><h2 id="bucles" tabindex="-1">Bucles <a class="header-anchor" href="#bucles" aria-label="Permalink to &quot;Bucles&quot;">​</a></h2><p>A continuación, echemos un vistazo a los bucles.</p><h3 id="for-foreach-y-while" tabindex="-1"><code>@for</code>, <code>@foreach</code> y <code>@while</code> <a class="header-anchor" href="#for-foreach-y-while" aria-label="Permalink to &quot;\`@for\`, \`@foreach\` y \`@while\`&quot;">​</a></h3><p><code>@for</code>, <code>@foreach</code> y <code>@while</code> funcionan igual en Blade que en PHP; consulte los ejemplos siguientes.</p><p><em><code>@for</code> y <code>@endfor</code></em></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@for ($i = 0; $i </span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $talk-&gt;slotsCount(); $i++)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    The number is {{ $i }}&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">br</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@endfor</span></span></code></pre></div><p><em><code>@foreach</code> y <code>@endforeach</code></em></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@foreach ($talks as $talk)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    • {{ $talk-&gt;title }} ({{ $talk-&gt;length }} minutes)&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">br</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@endforeach</span></span></code></pre></div><p><em><code>@while</code> y <code>@endwhile</code></em></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@while ($item = array_pop($items))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {{ $item-&gt;orSomething() }}&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">br</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@endwhile</span></span></code></pre></div><h3 id="forelse-y-endforelse" tabindex="-1"><code>@forelse</code> y <code>@endforelse</code> <a class="header-anchor" href="#forelse-y-endforelse" aria-label="Permalink to &quot;\`@forelse\` y \`@endforelse\`&quot;">​</a></h3><p><code>@forelse</code> es un <code>@foreach</code> que también te permite programar una función de respaldo si el objeto sobre el que estás iterando está vacío. Lo vimos en acción <a href="./echoing-data.html">al comienzo de este capítulo</a>; el ejemplo siguiente muestra otro.</p><p><em><code>@forelse</code></em></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@forelse ($talks as $talk)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    • {{ $talk-&gt;title }} ({{ $talk-&gt;length }} minutes)&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">br</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@empty</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    No talks this day.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@endforelse</span></span></code></pre></div><blockquote><p><strong><code>$loop</code> Dentro de <code>@foreach</code> y <code>@forelse</code></strong></p><p>Las directivas <code>@foreach</code> y <code>@forelse</code> agregan una característica que no está disponible en los bucles <code>foreach</code> de PHP: la variable <code>$loop</code>. Cuando se utiliza dentro de un bucle <code>@foreach</code> o <code>@forelse</code>, esta variable devolverá un objeto <code>stdClass</code> con estas propiedades:</p><ul><li><code>index</code>: El índice basado en 0 del elemento actual en el bucle; <code>0</code> significaría <em>&quot;primer elemento&quot;</em>.</li><li><code>iteration</code>: El índice basado en 1 del elemento actual en el bucle; <code>1</code> significaría <em>“primer elemento”</em>.</li><li><code>remaining</code>: Cuántos elementos quedan en el bucle.</li><li><code>count</code>: El recuento de elementos en el bucle.</li><li><code>first</code> y <code>last</code>: Valores booleanos que indican si este es el primer o el último elemento del bucle.</li><li><code>even</code> y <code>odd</code>: Valores booleanos que indican si se trata de una iteración par o impar.</li><li><code>depth</code>: ¿Cuántos “niveles” de profundidad tiene este bucle: <code>1</code> para un bucle, <code>2</code> para un bucle dentro de un bucle, etc.?</li><li><code>parent</code>: Una referencia a la variable <code>$loop</code> para el elemento del bucle padre si este bucle está dentro de otro bucle <code>@foreach</code>; de lo contrario, <code>null</code>.</li></ul></blockquote><blockquote><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@foreach ($pages as $page)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ $loop-&gt;iteration }}: {{ $page-&gt;title }}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       @if ($page-&gt;hasChildren())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       @foreach ($page-&gt;children() as $child)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ $loop-&gt;parent-&gt;iteration }}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               .{{ $loop-&gt;iteration }}:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               {{ $child-&gt;title }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       @endforeach</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       @endif</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@endforeach</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></blockquote>`,30),t=[l];function o(d,c,p,h,r,k){return a(),s("div",null,t)}const g=e(n,[["render",o]]);export{u as __pageData,g as default};
