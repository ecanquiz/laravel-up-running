import{_ as e,c as s,o as a,V as o}from"./chunks/framework.D9sOcAzr.js";const k=JSON.parse('{"title":"Respuestas Personalizadas","description":"","frontmatter":{},"headers":[],"relativePath":"routing-and-controllers/custom-responses.md","filePath":"routing-and-controllers/custom-responses.md"}'),n={name:"routing-and-controllers/custom-responses.md"},i=o('<h1 id="respuestas-personalizadas" tabindex="-1">Respuestas Personalizadas <a class="header-anchor" href="#respuestas-personalizadas" aria-label="Permalink to &quot;Respuestas Personalizadas&quot;">​</a></h1><p>Hay algunas otras opciones disponibles para que podamos regresar, así que repasemos las respuestas más comunes después de las vistas, redirecciones y cancelaciones. Al igual que con las redirecciones, puede ejecutar estos métodos en el asistente <code>response()</code> o en la fachada <code>Response</code>.</p><h2 id="response-make" tabindex="-1"><code>response()-&gt;make()</code> <a class="header-anchor" href="#response-make" aria-label="Permalink to &quot;`response()-&gt;make()`&quot;">​</a></h2><p>Si desea crear una respuesta HTTP manualmente, simplemente pase sus datos al primer parámetro de <code>response()-&gt;make()</code>: por ejemplo, <code>return response()-&gt;make(Hello, World!)</code>. Una vez más, el segundo parámetro es el código de estado HTTP y el tercero son sus encabezados.</p><h2 id="response-json-y-jsonp" tabindex="-1"><code>response()-&gt;json()</code> y <code>-&gt;jsonp()</code> <a class="header-anchor" href="#response-json-y-jsonp" aria-label="Permalink to &quot;`response()-&gt;json()` y `-&gt;jsonp()`&quot;">​</a></h2><p>Para crear una respuesta HTTP codificada en JSON de forma manual, pasa tu contenido compatible con JSON (matrices, colecciones o cualquier otra cosa) al método <code>json()</code>: por ejemplo <code>return response()-&gt;json(User::all())</code>. Es igual que <code>make()</code>, excepto que codifica en JSON (<code>json_encodes</code>) tu contenido y establece los encabezados apropiados.</p><h2 id="response-download-streamdownload-y-file" tabindex="-1"><code>response()-&gt;download()</code>, <code>-&gt;streamDownload()</code> y <code>-&gt;file()</code> <a class="header-anchor" href="#response-download-streamdownload-y-file" aria-label="Permalink to &quot;`response()-&gt;download()`, `-&gt;streamDownload()` y `-&gt;file()`&quot;">​</a></h2><p>Para enviar un archivo para que el usuario final lo descargue, pase una instancia de <code>SplFileInfo</code> o un nombre de archivo de cadena a <code>download()</code>, con un segundo parámetro opcional del nombre del archivo de descarga: por ejemplo, <code>return response()-&gt;download(&#39;file501751.pdf&#39;, &#39;myFile.pdf&#39;)</code>, que enviaría un archivo que está en <code>file501751.pdf</code> y lo renombraría, a medida que se envía, a <code>myFile.pdf</code>.</p><p>Para mostrar el mismo archivo en el navegador (si es un PDF o una imagen o algo más que el navegador pueda manejar), use <code>response()-&gt;file()</code> en su lugar, que toma los mismos parámetros que <code>response-&gt;download()</code>.</p><p>Si desea que algún contenido de un servicio externo esté disponible como descarga sin tener que escribirlo directamente en el disco de su servidor, puede transmitir la descarga mediante <code>response()-&gt;streamDownload()</code>. Este método espera como parámetros una clausura que hace <code>echo</code> de una cadena, un nombre de archivo y, opcionalmente, una matriz de encabezados; consulte el ejemplo siguiente.</p><p><em>Streaming de descargas desde servidores externos</em></p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">streamDownload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DocumentService</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myFile&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myFile.pdf&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>',12),r=[i];function t(d,l,p,c,h,u){return a(),s("div",null,r)}const g=e(n,[["render",t]]);export{k as __pageData,g as default};
