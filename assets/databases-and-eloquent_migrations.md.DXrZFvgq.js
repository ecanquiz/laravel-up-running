import{_ as e,c as s,o as a,V as i}from"./chunks/framework.D9sOcAzr.js";const m=JSON.parse('{"title":"Migraciones","description":"","frontmatter":{},"headers":[],"relativePath":"databases-and-eloquent/migrations.md","filePath":"databases-and-eloquent/migrations.md"}'),n={name:"databases-and-eloquent/migrations.md"},o=i(`<h1 id="migraciones" tabindex="-1">Migraciones <a class="header-anchor" href="#migraciones" aria-label="Permalink to &quot;Migraciones&quot;">​</a></h1><p>Los frameworks modernos como Laravel facilitan la definición de la estructura de la base de datos con migraciones basadas en código. Cada nueva tabla, columna, índice y clave se puede definir en código, y cualquier nuevo entorno se puede trasladar de una base de datos simple al esquema perfecto de la aplicación en segundos.</p><h2 id="definicion-de-migraciones" tabindex="-1">Definición de migraciones <a class="header-anchor" href="#definicion-de-migraciones" aria-label="Permalink to &quot;Definición de migraciones&quot;">​</a></h2><p>Una migración es un archivo único que define dos cosas: las modificaciones deseadas al ejecutar esta migración <em><strong>up</strong></em> y, opcionalmente, las modificaciones deseadas al ejecutar esta migración <em><strong>down</strong></em>.</p><blockquote><h2 id="up-y-down-en-las-migraciones" tabindex="-1">&quot;Up&quot; y &quot;Down&quot; en las Migraciones <a class="header-anchor" href="#up-y-down-en-las-migraciones" aria-label="Permalink to &quot;&quot;Up&quot; y &quot;Down&quot; en las Migraciones&quot;">​</a></h2><p>Las migraciones siempre se ejecutan en orden por fecha. Cada archivo de migración se llama de la siguiente manera: <code>2018_10_12_000000_create_users_table.php</code>. Cuando se migra un nuevo sistema, el sistema toma cada migración, comenzando en la fecha más temprana, y ejecuta su método <code>up()</code> — En este punto, lo estás migrando &quot;hacia arriba&quot;. Pero el sistema de migración también te permite &quot;revertir&quot; tu conjunto de migraciones más reciente. Tomará cada una de ellas y ejecutará su método <code>down()</code>, que debería deshacer los cambios que haya realizado la migración hacia arriba.</p><p>Entonces, el método <code>up()</code> de una migración debería “hacer” su migración, y el método <code>down()</code> debería “deshacerla”.</p></blockquote><p>El ejemplo siguiente muestra cómo se ve la migración “create users table” predeterminada que viene con Laravel.</p><p><em>Migración predeterminada de &quot;create users table&quot; de Laravel</em></p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">php</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Illuminate\\Database\\Migrations\\Migration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Illuminate\\Database\\Schema\\Blueprint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Illuminate\\Support\\Facades\\Schema</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Migration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    * Run the migrations.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> up</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Schema</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;users&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Blueprint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $table) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            $table</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            $table</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            $table</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;email&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unique</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            $table</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timestamp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;email_verified_at&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nullable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            $table</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;password&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            $table</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rememberToken</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            $table</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timestamps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    * Reverse the migrations.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> down</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Schema</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dropIfExists</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;users&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">Verificación de correo electrónico</p><p>La columna <code>email_verified_at</code> almacena una marca de tiempo que indica cuándo el usuario verificó su dirección de correo electrónico</p></div><p>Como puede ver, tenemos un método <code>up()</code> y un método <code>down()</code>. <code>up()</code> le dice a la migración que cree una nueva tabla llamada <code>users</code> con algunos campos, y <code>down()</code> le dice que elimine la tabla <code>users</code>.</p><h3 id="creando-una-migracion" tabindex="-1">Creando una migración <a class="header-anchor" href="#creando-una-migracion" aria-label="Permalink to &quot;Creando una migración&quot;">​</a></h3><p>Como verás en <a href="./../artisan-and-tinker/an-introduction-to-artisan.html#artisan-y-tinker">Artisan y Tinker</a>, Laravel proporciona una serie de herramientas de línea de comandos que puedes usar para interactuar con tu aplicación y generar archivos repetitivos. Uno de estos comandos te permite crear un archivo de migración. Puedes ejecutarlo usando <code>php artisan make:migration</code>, y tiene un solo parámetro, que es el nombre de la migración. Por ejemplo, para crear la tabla que acabamos de cubrir, ejecutarías <code>php artisan make:migration create_users_table</code>.</p><p>Hay dos indicadores que puedes pasar opcionalmente a este comando. <code>--create=table_name</code> rellena previamente la migración con código diseñado para crear una tabla llamada <code>table_name</code>, y <code>--table=table_name</code> simplemente rellena previamente la migración para modificaciones a una tabla existente.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan make:migration create_users_table</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan make:migration add_votes_to_users_table --table=users</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan make:migration create_users_table --create=users</span></span></code></pre></div><h3 id="creando-tablas" tabindex="-1">Creando tablas <a class="header-anchor" href="#creando-tablas" aria-label="Permalink to &quot;Creando tablas&quot;">​</a></h3><p>Ya vimos en la migración predeterminada de <code>create_users_table</code> que nuestras migraciones dependen de la fachada <code>Schema</code> y sus métodos. Todo lo que podamos hacer en estas migraciones dependerá de los métodos de <code>Schema</code>.</p><p>Para crear una nueva tabla en una migración, utilice el método <code>create()</code> — el primer parámetro es el nombre de la tabla y el segundo es una clausura que define sus columnas:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Schema</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;users&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Blueprint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $table) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Create columns here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="creando-columnas" tabindex="-1">Creando columnas <a class="header-anchor" href="#creando-columnas" aria-label="Permalink to &quot;Creando columnas&quot;">​</a></h3><p>Para crear nuevas columnas en una tabla, ya sea en una llamada de creación de tabla o en una llamada de modificación de tabla, use la instancia de <code>Blueprint</code> que se pasa a su clausura:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Schema</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;users&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Blueprint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $table) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     $table</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>Veamos los distintos métodos disponibles en las instancias de <code>Blueprint</code> para crear columnas. Describiré cómo funcionan en MySQL, pero si estás usando otra base de datos, Laravel simplemente usará el equivalente más cercano.</p><p>Los siguientes son los métodos de campo simples de <code>Blueprint</code>:</p><ul><li><strong><code>id()</code></strong>: Un alias para <code>$table-&gt;bigIncrements(&#39;id&#39;)</code></li><li><strong><code>integer(colName)</code></strong>, <strong><code>tinyInteger(colName)</code></strong>, <strong><code>smallInteger(colName)</code></strong>, <strong><code>mediumInteger(colName)</code></strong>, <strong><code>bigInteger(colName)</code></strong>, <strong><code>unsignedTinyInteger(colName)</code></strong>, <strong><code>unsignedSmallInteger(colName)</code></strong>, <strong><code>unsignedMediumInteger(colName)</code></strong>, <strong><code>unsignedBigInteger(colName)</code></strong>: Agrega una columna de tipo <code>INTEGER</code>, o una de sus muchas variaciones</li><li><strong><code>string(colName, length)</code></strong>: Agrega una columna de tipo <code>VARCHAR</code> con una longitud opcional</li><li><strong><code>binary(colName)</code></strong>: Agrega una columna de tipo <code>BLOB</code></li><li><strong><code>boolean(colName)</code></strong>: Agrega una columna de tipo <code>BOOLEAN</code> (una <code>TINYINT(1)</code> en MySQL)</li><li><strong><code>char(colName, length)</code></strong>: Agrega una columna <code>CHAR</code> con una longitud opcional</li><li><strong><code>date(colName)</code></strong>, <strong><code>datetime(colName)</code></strong>, <strong><code>dateTimeTz(colName)</code></strong>: Agrega una columna <code>DATE</code> o <code>DATETIME</code>; si se necesita conocer la zona horaria, utilice el método de fecha <code>TimeTz()</code> para crear una columna <code>DATETIME</code> con zona horaria</li><li><strong><code>decimal(colName, precision, scale)</code></strong>, <strong><code>unsignedDecimal(colName, precision, scale)</code></strong>: Agrega una columna <code>DECIMAL</code>, con precisión y escala — por ejemplo, <code>decimal(&#39;amount&#39;, 5, 2)</code> especifica una precisión de <code>5</code> y una escala de <code>2</code>; para una columna sin signo, use el método <code>unsignedDecimal</code></li><li><strong><code>double(colName, total digits, digits after decimal)</code></strong>: Agrega una columna <code>DOUBLE</code> — por ejemplo, <code>double(&#39;tolerance&#39;, 12, 8)</code> especifica <code>12</code> dígitos de longitud, con <code>8</code> de esos dígitos a la derecha del decimal, como en <code>7204.05691739</code></li><li><strong><code>enum(colName, [choiceOne, choiceTwo])</code></strong>: Agrega una columna <code>ENUM</code>, con las opciones proporcionadas</li><li><strong><code>float(colName, precision, scale)</code></strong>: Agrega una columna <code>FLOAT</code> (igual que <code>double</code> en MySQL)</li><li><strong><code>foreignId(colName), foreignUuid(colName)</code></strong>: Agrega una columna <code>UNSIGNED BIGINT</code> o <code>UUID</code>, con las opciones proporcionadas</li><li><strong><code>foreignIdFor(colName)</code></strong>: Agrega una columna <code>UNSIGNED BIG INT</code> con el nombre <code>colName</code></li><li><strong><code>geometry(colName)</code></strong>, <strong><code>geometryCollection(colName)</code></strong>: Agrega una columna <code>GEOMETRY</code> o <code>GEOMETRYCOLLECTION</code></li><li><strong><code>ipAddress(colName)</code></strong>: Agrega una columna VARCHAR</li><li><strong><code>json(colName)</code></strong>, <strong><code>jsonb(colName)</code></strong>: Agrega una columna <code>JSON</code> o <code>JSONB</code></li><li><strong><code>lineString(colName)</code></strong>, <strong><code>multiLineString(colName)</code></strong>: Agrega una columna <code>LINESTRING</code> o <code>MULTILINESTRING</code> con el <code>colName</code> indicado</li><li><strong><code>text(colName)</code></strong>, <strong><code>tinyText(colName)</code></strong>, <strong><code>mediumText(colName)</code></strong>, <strong><code>longText(colName)</code></strong>: Agrega una columna de <code>TEXT</code> (o sus distintos tamaños)</li><li><strong><code>macAddress(colName)</code></strong>: Agrega una columna <code>MACADDRESS</code> en las bases de datos que la admiten (como PostgreSQL); en otros sistemas de bases de datos, crea una cadena equivalente</li><li><strong><code>multiPoint(colName)</code></strong>, <strong><code>multiPolygon(colName)</code></strong>, <strong><code>polygon(colName)</code></strong>, <strong><code>point(colName)</code></strong>: Agrega columnas de los tipos <code>MULTIPOINT</code>, <code>MULTIPOLYGON</code>, <code>POLYGON</code> y <code>POINT</code>, respectivamente</li><li><strong><code>set(colName, membersArray)</code></strong>: Crea una columna <code>SET</code> con el nombre <code>colName</code> y <code>membersArray</code> como miembros</li><li><strong><code>time(colName, precision)</code></strong>, <strong><code>timeTz(colName, precision)</code></strong>: Agrega una columna <code>TIME</code> con el nombre <code>colName</code>; para conocer la zona horaria, utilice el método <code>timeTz()</code></li><li><strong><code>timestamp(colName, precision)</code></strong>, <strong><code>timestampTz(colName, precision)</code></strong>: Agrega una columna <code>TIMESTAMP</code>; para conocer la zona horaria, utilice el método <code>timestampTz()</code></li><li><strong><code>uuid(colName)</code></strong>: Agrega una columna <code>UUID (CHAR(36)</code> en MySQL)</li><li><strong><code>year()</code></strong>: Agrega una columna de <code>YEAR</code></li></ul><p>Y estos son los métodos especiales (unidos) de <code>Blueprint</code>:</p><ul><li><strong><code>increments(colName)</code></strong>, <strong><code>tinyIncrements(colName)</code></strong>, <strong><code>smallIncrements(colName)</code></strong>, <strong><code>mediumIncrements(colName)</code></strong>, <strong><code>bigIncrements(colName)</code></strong>: Agrega un <code>ID</code> de clave principal <code>INTEGER</code> incremental sin signo, o una de sus muchas variaciones</li><li><strong><code>timestamps(precision)</code></strong>, <strong><code>nullableTimestamps(precision)</code></strong>, <strong><code>timestampsTz(precision)</code></strong>: Agrega columnas de marca de tiempo <code>created_at</code> y <code>updated_at</code> con precisión opcional, valores nulos y variaciones que reconocen la zona horaria</li><li><strong><code>rememberToken()</code></strong>: Agrega una columna <code>remember_token (VARCHAR(100))</code> para los tokens <em>&quot;remember me&quot;</em> del usuario</li><li><strong><code>softDeletes(colName, precision)</code></strong>, <strong><code>softDeletesTz(colName, precision)</code></strong>: Agrega una marca de tiempo <code>delete_at</code> para usar con <em>soft deletes</em> con precisión opcional y variaciones que tienen en cuenta la zona horaria</li><li><strong><code>morphs(colName)</code></strong>, <strong><code>nullableMorphs(colName)</code></strong>, <strong><code>uuidMorphs(relationshipName)</code></strong>, <strong><code>nullableUuidMorphs(relationshipName)</code></strong>: Para un <code>colName</code> proporcionado, agrega un entero <code>colName_id</code> y una cadena <code>colName_type</code> (por ejemplo, <code>morphs(tag)</code> agrega un entero <code>tag_id</code> y una cadena <code>tag_type</code>); para usar en relaciones polimórficas, usando <code>ID</code> o <code>UUID</code>, y se puede configurar como <em>nullable</em> según el nombre del método</li></ul><h3 id="building-extra-properties-fluently" tabindex="-1">Building extra properties fluently <a class="header-anchor" href="#building-extra-properties-fluently" aria-label="Permalink to &quot;Building extra properties fluently&quot;">​</a></h3>`,27),t=[o];function l(c,d,r,p,h,g){return a(),s("div",null,t)}const u=e(n,[["render",l]]);export{m as __pageData,u as default};
