import{_ as e,c as a,o,V as s}from"./chunks/framework.D9sOcAzr.js";const m=JSON.parse('{"title":"Suplantación de Métodos de Formulario","description":"","frontmatter":{},"headers":[],"relativePath":"routing-and-controllers/form-method-spoofing.md","filePath":"routing-and-controllers/form-method-spoofing.md"}'),i={name:"routing-and-controllers/form-method-spoofing.md"},t=s(`<h1 id="suplantacion-de-metodos-de-formulario" tabindex="-1">Suplantación de Métodos de Formulario <a class="header-anchor" href="#suplantacion-de-metodos-de-formulario" aria-label="Permalink to &quot;Suplantación de Métodos de Formulario&quot;">​</a></h1><p>A veces es necesario definir manualmente qué verbo HTTP debe enviar un formulario. Los formularios HTML solo permiten <code>GET</code> o <code>POST</code>, por lo que si desea cualquier otro tipo de verbo, deberá especificarlo usted mismo.</p><h2 id="verbos-http-en-laravel" tabindex="-1">Verbos HTTP en Laravel <a class="header-anchor" href="#verbos-http-en-laravel" aria-label="Permalink to &quot;Verbos HTTP en Laravel&quot;">​</a></h2><p>Como ya hemos visto, puedes definir qué verbos coincidirán con una ruta en la definición de ruta usando <code>Route::get()</code>, <code>Route::post()</code>, <code>Route::any()</code> o <code>Route::match()</code>. También puedes hacer coincidir con <code>Route::patch()</code>, <code>Route::put()</code> y <code>Route::delete()</code>.</p><p>Pero, ¿cómo se envía una solicitud que no sea <code>GET</code> con un navegador web? En primer lugar, el atributo de método en un formulario HTML determina su verbo HTTP: si su formulario tiene un método <code>&quot;GET&quot;</code>, se enviará a través de parámetros de consulta y un método <code>GET</code>; si el formulario tiene un método <code>&quot;POST&quot;</code>, se enviará a través del cuerpo de la publicación y un método <code>POST</code>.</p><p>Los frameworks de JavaScript facilitan el envío de otras solicitudes, como <code>DELETE</code> y <code>PATCH</code>. Pero si necesitas enviar formularios HTML en Laravel con verbos distintos a <code>GET</code> o <code>POST</code>, tendrás que usar la suplantación de métodos de formulario, lo que significa suplantar el método HTTP en un formulario HTML.</p><h2 id="suplantacion-de-metodos-http-en-formularios-html" tabindex="-1">Suplantación de Métodos HTTP en Formularios HTML <a class="header-anchor" href="#suplantacion-de-metodos-http-en-formularios-html" aria-label="Permalink to &quot;Suplantación de Métodos HTTP en Formularios HTML&quot;">​</a></h2><p>Para informar a Laravel que el formulario que estás enviando actualmente debe tratarse como algo distinto a un <code>POST</code>, agrega una variable oculta llamada <code>_method</code> con el valor <code>&quot;PUT&quot;</code>, <code>&quot;PATCH&quot;</code> o <code>&quot;DELETE&quot;</code>, y Laravel coincidirá y enrutará ese envío de formulario como si en realidad fuera una solicitud con ese verbo.</p><p><em>Suplantación de métodos de formulario</em></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/tasks/5&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hidden&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;_method&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DELETE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    &lt;!-- or: --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @method(&#39;DELETE&#39;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div>`,10),n=[t];function d(r,l,c,p,h,u){return o(),a("div",null,n)}const E=e(i,[["render",d]]);export{m as __pageData,E as default};
