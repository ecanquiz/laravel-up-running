import{_ as s,c as a,o as i,V as e}from"./chunks/framework.D9sOcAzr.js";const E=JSON.parse('{"title":"Configuración de Laravel Vite","description":"","frontmatter":{},"headers":[],"relativePath":"frontend-components/laravel-vite-configuration.md","filePath":"frontend-components/laravel-vite-configuration.md"}'),n={name:"frontend-components/laravel-vite-configuration.md"},l=e(`<h1 id="configuracion-de-laravel-vite" tabindex="-1">Configuración de Laravel Vite <a class="header-anchor" href="#configuracion-de-laravel-vite" aria-label="Permalink to &quot;Configuración de Laravel Vite&quot;">​</a></h1><p>Vite es un entorno de desarrollo frontend local que combina un servidor de desarrollo y una cadena de herramientas de compilación basada en Rollup. Puede parecer mucho, pero en Laravel, se usa principalmente para agrupar activos CSS y JavaScript.</p><p>Laravel ofrece un complemento NPM y una directiva Blade para facilitar el trabajo con Vite. Ambos están incluidos en las aplicaciones de Laravel junto con un archivo de configuración: <code>vite.config.js</code>.</p><p>Eche un vistazo al ejemplo siguiente para ver cómo se ve el contenido del archivo <code>vite.config.js</code> predeterminado.</p><p><em>El predeterminado <code>vite.config.js</code></em></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vite&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> laravel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;laravel-vite-plugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    laravel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      input: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;resources/css/app.css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;resources/js/app.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      refresh: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>Estamos definiendo los archivos desde los cuales nuestro complemento debe construirse (<code>input</code>) y diciendo que queremos que la función “actualizar mi página cada vez que guardo un archivo de vista” esté habilitada (<code>refresh</code>).</p><p>De forma predeterminada, Vite extrae datos de los dos archivos enumerados en el ejemplo anterior y se actualizará automáticamente cada vez que se produzca un cambio en algún archivo de estas carpetas:</p><ul><li><code>app/View/Components/</code></li><li><code>lang/</code></li><li><code>resources/lang/</code></li><li><code>resources/views/</code></li><li><code>routes/</code></li></ul><p>Ahora que tenemos nuestra configuración de Vite apuntando a nuestros archivos de entrada CSS y JavaScript, querremos hacer referencia a esos archivos usando la directiva Blade <code>@vite</code>, como puede ver en el ejemplo siguiente.</p><p><em>Uso de la directiva <code>@vite</code> de Blade</em></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @vite([&#39;resources/css/app.css&#39;, &#39;resources/js/app.js&#39;])</span></span></code></pre></div><p>¡Eso es todo! A continuación, veamos cómo agrupar archivos con Vite.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Si su dominio de desarrollo local es seguro (HTTPS), deberá modificar su archivo <code>vite.config.js</code> para que apunte a sus credenciales. Si está usando Valet, hay una opción de configuración especial para eso:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    laravel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        valetTls: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name-of_my-app-here.test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></div><h2 id="agrupacion-de-archivos-con-vite" tabindex="-1">Agrupación de Archivos con Vite <a class="header-anchor" href="#agrupacion-de-archivos-con-vite" aria-label="Permalink to &quot;Agrupación de Archivos con Vite&quot;">​</a></h2><p>Finalmente, es hora de agrupar nuestros recursos. Hay dos maneras de agruparlos con Vite: &quot;build&quot; y &quot;dev&quot;.</p><p>Si desea compilar sus archivos una vez, ya sea para entregarlos a producción o para realizar pruebas locales, ejecute <code>npm run build</code> y Vite agrupará sus recursos. Sin embargo, si desarrolla localmente, puede que prefiera que Vite inicie un proceso que supervise sus archivos de vista para detectar cambios, reactive la compilación cada vez que detecte cambios y actualice la página en su navegador. Esto es lo que <code>npm run dev</code> hace por usted.</p><p>Los archivos compilados terminarán en la carpeta <code>public/build/assets</code> de su aplicación, con un archivo ubicado en <code>public/build/manifest.json</code> que le indica a Laravel y Vite cómo llegar a cada archivo compilado desde su referencia de ruta no compilada.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>La carpeta <code>public/build</code> se ignora de forma predeterminada en <code>.gitignore</code> de Laravel, así que asegúrese de ejecutar <code>npm run build</code> como parte de su proceso de implementación.</p></div>`,19),t=[l];function p(o,r,c,d,h,k){return i(),a("div",null,t)}const g=s(n,[["render",p]]);export{E as __pageData,g as default};
