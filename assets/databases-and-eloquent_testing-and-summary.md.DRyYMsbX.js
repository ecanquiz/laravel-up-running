import{_ as s,c as n,o as t,m as e,a}from"./chunks/framework.D9sOcAzr.js";const g=JSON.parse('{"title":"Pruebas","description":"","frontmatter":{},"headers":[],"relativePath":"databases-and-eloquent/testing-and-summary.md","filePath":"databases-and-eloquent/testing-and-summary.md"}'),o={name:"databases-and-eloquent/testing-and-summary.md"},r=e("h1",{id:"pruebas",tabindex:"-1"},[a("Pruebas "),e("a",{class:"header-anchor",href:"#pruebas","aria-label":'Permalink to "Pruebas"'},"​")],-1),d=e("h2",{id:"resumen",tabindex:"-1"},[a("Resumen "),e("a",{class:"header-anchor",href:"#resumen","aria-label":'Permalink to "Resumen"'},"​")],-1),i=e("p",null,"Laravel viene con un conjunto de potentes herramientas de base de datos, que incluyen migraciones, propagación, un elegante generador de consultas y Eloquent, un potente ORM de ActiveRecord. Las herramientas de base de datos de Laravel no requieren que uses Eloquent en absoluto: puedes acceder y manipular la base de datos con una fina capa de comodidad sin tener que escribir SQL directamente. Pero agregar un ORM, ya sea Eloquent o Doctrine o cualquier otro, es fácil y puede funcionar perfectamente con las herramientas de base de datos principales de Laravel.",-1),c=e("p",null,"Eloquent sigue el patrón ActiveRecord, que simplifica la definición de una clase de objetos respaldados por una base de datos, incluida la tabla en la que están almacenados y la forma de sus columnas, accesores y mutadores. Eloquent puede manejar todo tipo de acción SQL normal y también relaciones complejas, hasta e incluyendo relaciones polimórficas de muchos a muchos.",-1),l=e("p",null,"Laravel también tiene un sistema robusto para probar bases de datos, incluidas las fábricas de modelos.",-1),u=[r,d,i,c,l];function m(p,b,h,_,f,q){return t(),n("div",null,u)}const v=s(o,[["render",m]]);export{g as __pageData,v as default};
